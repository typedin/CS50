/**
 * dictionary.c
 *
 * Computer Science 50
 * Problem Set 5
 *
 * Implements a dictionary's functionality.
 */

#include <stdbool.h>

#include "dictionary.h"

struct _trie *root;

/**
 * Returns true if word is in dictionary else false.
 */
bool check(const char *word)
{
	if (root == NULL)
		exit (1);
		
	trie *crawler = root;
	
	int index = 0;
	
	for(int i = 0; word[i] != '\0' ; i++)
	{

		// assign index to the current letter of the word
		// the letter is lowercase indexed
		// apostrophes are valid
		// index them in the last path
		if (word[i] == 39)
		{
			index = 26;
		}
		else if (isalpha(word[i]))
		{
			index = tolower(word[i]) - 97;
		}

		// We hit a dead end in the trie
		// AND
		// We're at the end of the word
		if (crawler->path[index] == NULL)
		{
			break;
		}	
		else
		{
			crawler = crawler->path[index];
		}
	}

	printf("crawler->word: %s", crawler->word);
	printf("word: %s", word);
	// let's save some time
	if(strlen(crawler->word) != strlen(word))
		{
			printf("returning false\n");
			return false;
		}
	else	
		for(int i = 0 ; i < strlen(word) + 1 ; i++)
		{
			if(crawler->word[i] != word[i] || (crawler->word[i] == '\0') || word[i] == '\0')
			{
				printf("returning false\n");
				return false;
			}
			
		}
		
	printf("returning true\n");	
	return true;
}

/**
 * Loads dictionary into memory.  Returns true if successful else false.
 */
bool load(const char* dictionary)
{
    // open file passed as a string
	FILE *fp = fopen(dictionary, "r");
	if (!fp)
		return false;
	
	// create root aka : first node
	root = node_allocation();
	if (!root)
		return false;
		
	// assumes no word exceeds LENGTH (45)
    // plus one for the null character 
	char *word = malloc((LENGTH + 1) * sizeof(char));
	if (!word)
		return false;
		
    while (fscanf(fp, " %s", word) == 1) 
    {
        if(insert_word(root, word) == false)
        {
        	free(word);
        	return false;
        }
    }

	free(word);
	
    return true;
}

/**
 * Returns number of words in dictionary if loaded else 0 if not yet loaded.
 */
unsigned int size(void)
{
       
    return root->nb_words;
}

/**
 * Unloads dictionary from memory.  Returns true if successful else false.
 */
bool unload(void)
{
    free_trie(root);
	
	return true;
}


/**
 *
 * For this, credit goes to :
 * http://stackoverflow.com/questions/34691151/how-to-free-recursive-struct-trie
 *
 * I only added line 130-132
 */
void free_trie(trie *node)
{

	// safe guard including root node.
	if(!node)
		return; 

	// recursive case (go to end of trie)
	for (int i = 0; i < 27; i++)
	{
		
		free_trie(node->path[i]);
	}

    // if the node holds a word
    if(node->word)
    	free(node->word);

    // base case	
    free(node);
}

/**
 * Why do I need to do what's on line 151 ?
 * valgrind complains if I don't.
 */
struct _trie * node_allocation()
{
	trie *new_node = malloc(sizeof(trie));
	
	if (new_node == NULL)
	{
		printf("Error pointer is NULL\n");
		exit (1);
	}
	
	new_node->word = NULL;
	
	for(int i = 0 ; i < 27 ; i++)
	{
		new_node->path[i] = NULL;
	}
	
	return new_node;
}

bool insert_word(trie *root, char *word)
{
		
	if (root == NULL)
		return false;
	
	// initialize a crawler pointer to root
	
	trie *crawler = root;
	
	// index to iterate over path[] member fo struct trie
	int index = 0;
	
	for(int i = 0; word[i] != '\0' ; i++)
	{

		// assign index to the current letter of the word
		// the letter is lowercase indexed
		// apostrophes are valid$
		// index them in the last path
		if (word[i] == 39)
		{
			index = 26;
		}
		else
		{
			index = tolower(word[i]) - 97;
		}

		// new path is closed
		if (crawler->path[index] == NULL)
		{
			
			// malloc the new path
			crawler->path[index] = node_allocation();
			
			crawler = crawler->path[index];
		}	
		else
		{
			crawler = crawler->path[index];
		}
		
		if (word[i + 1] == '\0')
		{
			crawler->word = malloc(strlen(word) * sizeof(char) + 1);
			
			// this could be smarter...
			for (int i = 0 ; i < strlen(word) ; i++)
			{
				crawler->word[i] = word[i];
			}
			root->nb_words++;
					
		}
	}
	
	return true;
	
}

