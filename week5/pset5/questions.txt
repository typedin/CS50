0.  
	According to Wikipedia, it's the longest word in the English language, published in a dctionnary.
	
1.  
	getrusage() returns resource usage measure for who, which can be either : RUSAGE_SELF, RUSAGE_CHILDREN or RUSAGE_THREAD. In this pset, only RUSAGE_SELF is implemented.
	
2.  
	16
	
3.  
	As per the man page's synopsis for getrusage(), the function is defined as follow : 
	int getrusage(int who, struct rusage *usage);
	Further in the same man page, we can read "[...]the reading usages are returned in the structure pointed to by usage[...]".	
	Even if we don't change the values in the function, the function expects a pointer to a struct.

4.  
	The for loop:

	The main idea is to concatenate each valid character from each valid word into a "string". Then we look this string up in the dictionary.

By valid character we mean : letters (a to z : lower and upper case) and apostrophes.
By valid word we mean : any string of characters that is not longer than 45 letters, that doesn't contain numbers, that doesn't begin (or end) with an apostrophe.
 
	The longest word in the English language is pneumonoultramicroscopicsilicovolcanoconiosis which is 45 character long, thus no word can be longer. 
Each valid character is stored as an integer in "int c" and then is appended into an array of characters (variable : word[LENGTH + 1]).

The array of character is 45 character long plus 1 : enough to store the longest word plus the NULL character.

A more line-to-line explanation :
The "for loop" (line 77).
initialization : the int c is initialized to the first character of the file pointed to by the pointer fp;
condition : the loop spins until c returns EOF : -1 (minus one) "is equivalent to" EOF.
increment : fgetc reads a character if any, returns an int,  and sets the file position indicator to the next position.

Append the character to the string, if one of those two conditions are met (on line 80):

- isalpha(c) : check whether c is a valid character : a to z, A to Z and ' (apostrophe) 
- c == '\'' && index > 0 : the apostrophe is valid when it's not at the beginning of a word

On line 87 :
we're not reading a valid word, because it's longer than 45. So the while loop moves the file pointer forward until a new word is found.

On line 98 :
we're not reading a valid word, because it contains digits. The while loop on line 101 moves the file pointer forward until a new word is found.

On line 108 :
A valid word is found, we're adding a NULL character to the array so it makes a "string", and we're incrementing the counter for the number of words read from the text file.

On line 118 : 
we're actually checking the word made of valid characters against the data in the dictionary.
If the word is not in the dictionary, we print it out, and we increment the counter for misspelled words.
At the end of the loop, we're resetting index of "the array word" to 0. 

In main(), every call to the function getrusage() and calculate are for benchmarking purpose : it measures how much time we're spending in the function we've emplemented. 

5.  
	The two main reasons I can see are : a the conversion and/or a dynamic memory allocation issue  would arise with fscansf.
	Maybe the performances would be worse with the fscanf() method : we might not have the same complexity.  
	Per the man page for fgetc(), we know that fgetc() reads a character and returns it as an unsigned char cast to an int.
	By reading character by character with the fgetc() method, we can break out of the loop as soon as an invalid character is found, with no further coding  

6.  
	TODO

7.
	I implemented a trie data structure. 
	Each node contains two members :
	- a bool value which tells whether the node is the end of a word 
	- and an array of 27 pointers : one for each valid character (a to z : 0 to 25 and apostrophe : 26)
	
8.  
	I should have wrote that down somewhere... As far as I can remember, the code by that time wasn't much slower than it is now.
	
9. 	
	My first idea was to store the number of words in the dictionary and the file pointer in the struct, which was both memory and processor time consuming. So I moved them out of the struct and I declared them as global variables. 
	I always feel like global variables are of bad practice... Because on the internet, we always read something about the wrongness of declaring global variables...
	 
10. 
	In my opinion, I could improve the load/unload functions. They are my bottlenecks. I don't really know how I could bring about some improvement in those.